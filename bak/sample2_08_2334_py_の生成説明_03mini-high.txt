2025/02/09
https://chatgpt.com/c/67a77cd7-de1c-8002-97e8-50fc128764e4



1m 45s の間、推論済み
以下は、CSV の先頭に記述された LAYOUT 部（複数行ヘッダー）から各フィールドの階層構造を動的に構築し、その情報をもとにデータ部の各レコードを入れ子（ネスト）構造のオブジェクトとして生成、最終的に JSON 出力するサンプルコードです。

下記コードは、

CSV の先頭数行（先頭セルに "LAYOUT" がある行）をヘッダー行として読み込み、各行について「継承記号 <」を左側の値で置換するとともに、行末が不足している場合は最後の値で補完します。
補完済みのヘッダー行グリッドから、各列ごとに「パス」（例:
["contacts[]", "type"] や
["address[]", "coordinates[]", "lat"]）を作成します。さらに、各要素に「配列」を示す [] が含まれている場合はフラグを立て、出力時には名前から [] を除いたものをフィールド名とします。
データ部は、最初のセルが空なら新規レコード、"*" なら前レコードの継続行とみなし、各行のセル（ヘッダーと同じ列数に右側補完）をヘッダーのパスに従って入れ子構造の辞書へマッピングします。
※たとえば、最初のレコードでは下記のような構造が生成されます。




補足説明
ヘッダー解析（build_header_grid / build_col_to_path）
CSV の先頭にある LAYOUT 行（先頭セルを除いた部分）を各行ごとに読み込み、
– 横方向の「継承記号 <」は直前の値で置換
– 行数が最大列数に満たない場合は、最後の値で右側を補完
とし、各列ごとに「階層パス」を作成します。
たとえば、今回のサンプルでは

列 2: [("contacts", True), ("type", False)]
列 3: [("contacts", True), ("value", False)]
列 7: [("address", True), ("coordinates", True), ("lat", False)]
列 8: [("address", True), ("coordinates", True), ("lon", False)]
となります。
データ部の処理（process_record_group / set_value）
CSV のデータ部は、先頭セルが空なら新規レコード、"*" なら前レコードの継続行とみなし、 各行の（先頭セル除く）セルの値を、先ほどのヘッダーのパスに従って入れ子の辞書へセットします。
配列フィールドの場合は、継続行ごとに新規要素を作成（同一行内で複数のセルがあれば 1 つの要素にまとめる）するよう実装しています。

JSON 出力
最後に、ヘッダー解析結果と各レコードの入れ子構造の辞書をまとめたものを JSON 形式で標準出力します。

このコードを例えば script.py として保存し、

bash
コピーする
python script.py sample.csv
と実行すると、CSV ヘッダーから動的に構築したフィールド階層と、データ部から生成されたレコード情報が JSON で出力されます。
